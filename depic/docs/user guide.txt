************************
***                  ***
*** DEPIC User Guide ***
***                  ***
************************



1. 	Purpose: 
	
	This document describes how to set up and run a demo of DEPIC
	
	Scenario: 
		- DaaS provider has a real time GPS data source 
		- The provider has a data analytic function to analyze data like this: https://github.com/tuwiendsg/EPICS/blob/master/depic/examples/demo/daf_gps_1.t2flow ; this daf can be viewed using Taverna Workbench (http://www.taverna.org.uk/download/workbench/)
		- The provider wants to sell the data asset resulted from the daf to the customer with expected quality and performance written in QoR (https://github.com/tuwiendsg/EPICS/blob/master/depic/examples/demo/qor_xml.yml)
		- The demo shows how to setup depic and use depic to generate data elasticity management process to ensure QoR for this data asset; how to retrieved data asset via eDaaS Client; and how to query input specification (qor, daf), generated data elasticity management process and primitive action.
		
	
	
2. 	Getting Started:
	
	i. Create a virtual machine
		- minimum configuration: m1.small | 1GB RAM | 1 VCPU | 40GB Disk
		- OS: Ubuntu 14.04 LTS
	ii. Install core services
		- download script to install depic service: wget http://128.130.172.215/salsa/upload/files/jun/artifact_sh/depic_install.sh 
		- configure $DEPIC_IP in the second line of the above script (Depic needs a floating IP address, so monitoring/adjustment services can interact with Depic after their deployment): vi depic_install.sh
		- grant execution permission for the script: sudo chmod 777 depic_install.sh
		- execute the install script, use password 123 for phd admin: sudo ./depic_install.sh
	ii. Install iCOMOT and MOM		

	
3. 	Generating Data Elasticity Management Process:ßß
	i. Go to user interface of depic: http://[IP]:8080//DepicTooling/
	ii. Generate data elasticity management process from the following inputs:
		- eDaaS Name: edaas1
		- Quality of Results: https://github.com/tuwiendsg/EPICS/blob/alpha/depic/examples/demo/qor_xml.yml
		- Data Analytics Function: https://github.com/tuwiendsg/EPICS/blob/alpha/depic/examples/demo/daf_gps_1.t2flow
		- DataBase Type: MySql
		- Click button: Generate eDaaS
	iii. Verify the result:
	
		- Data Elasticity Management Process 
			- Monitoring Process: vi /home/ubuntu/log/monitorProcess.yml
			- Adjustment Process: vi /home/ubuntu/log/listOfAdjustmentProcesses.yml 
			- Resource Control Plan: vi /home/ubuntu/log/listOfResourceControlPlans.yml
		


4. 	Deployment of Monitoring/Adjustment Services:
	i. Go to COMOT user interface: http://128.130.172.215:8080/iCOMOT/
	ii. Goto Deployment And Management tab:
	iii. click on “edaas1CloudService”
	iv. Wait until state of services changes to DEPLOYED
	v. Checking tomcat log: tail -f /var/log/tomcat7/catalina.out
	vi. Wait until you see number “4” appears every 10 seconds. It’s important because it indicates that 4 adjustment/monitoring services are deployed successful. 


5. 	Operation
	i. Download and compile Depic Client:  https://github.com/tuwiendsg/EPICS/tree/master/utils/ElasticDaaSClient
	ii. Start Data Analytic PLatform: run at.ac.tuwien.dsg.elasticdaasclient.demo.RestClientDAFM
	iii. Start GPS Data Sensor: run at.ac.tuwien.dsg.elasticdaasclient.demo.RestClientDataSourceEmulator
	iv. Start eDaaS client: run at.ac.tuwien.dsg.elasticdaasclient.demo.RestClientEDaaS
 
	v. You should see the following displayed on the browsers:
		c00 is running !
		c01 is running !
		c02 is running !
		c03 is running !
		c04 is running !
	vi. Checking tomcat log to see the operation: tail -f /var/log/tomcat7/catalina.out
	vii. Go to Comot - tab Elasticity Monitoring to see the scaling out/in of Adjustment/Monitoring services
	viii. Logging: you can check the following logs:
		- Data Quality: vi /home/ubuntu/log/edaas_quality.txt
		- DEP execution time: vi /home/ubuntu/log/edaas_process_time.txt
		- Number of VMs: vi vi /home/ubuntu/log/vm_log.txt
		- DAFM time: vi /home/ubuntu/log/temp/start.txt
			     vi /home/ubuntu/log/temp/end.txt	
	

6. 	Customization of EDaaS
	i. Download source code of eDaaS at: http://128.130.172.214:8080/DepicTooling/edaasproject/edaas1.zip
	

7. 	Customization of DAF tasks:
	i. note:
		- Whenever we start Data Analytic Platform, this method is call to pass the daf to a workflow engine: at.ac.tuwien.dsg.depic.dataassetfunctionmanagement.DawResource.executeDataAssetFunction
		- Any DAF should have the last task is an outputer. This outputer has to put an object of class DataAsset (https://github.com/tuwiendsg/EPICS/blob/master/depic/depic-common/src/main/java/at/ac/tuwien/dsg/depic/common/entity/eda/dataasset/DataAsset.java) into a REST interface http://localhost:8080/data-asset-loader/rest/dataasset/repo/storedataasset
		- An example of outputer can be found here: https://github.com/tuwiendsg/EPICS/blob/master/utils/DAFServices/src/main/java/at/ac/tuwien/dsg/task/MySQLOutputer.java



8. 	REST to query input specification
	- get QoR: PUT eDaaSName into /rest/dep/get/qor
	- get DAF: PUT eDaaSName into /rest/dep/get/daf
	- get DEP: PUT eDaaSName into /rest/dep/get/dep


9. 	REST to query Primitive Action
	- get Monitoring Action: PUT actionName into /rest/pam/get/monitoringaction
	- get Adjustment Action: PUT actionName into rest/pam/get/adjustmentaction
	- get Resource Control Action: PUT actionName into /rest/pam/get/resourcecontrolaction
